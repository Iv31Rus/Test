CREATE DATABASE *имя* -  создание базы данных, после которой указывается название базы данных.
DROP DATABASE *имя* - удаление базы данных, база данных должна быть неактивной.
CREATE TABLE *имя* - создания таблиц, после указывается название таблицы. Также можно использовать операторы, которые определяют столбцы таблицы и их атрибуты.
CREATE TABLE *имя_таблицы*
(название_столбца1 тип_данных атрибуты_столбца1, 
 название_столбцаN тип_данных атрибуты_столбцаN,
 атрибуты_таблицы);
DROP TABLE *имя* - удаление таблицы
ALTER TABLE - изменить уже имеющуюся таблицу
{ ADD название_столбца тип_данных_столбца [ограничения_столбца] | 
  DROP COLUMN название_столбца |
  ALTER COLUMN название_столбца параметры_столбца |
  ADD [CONSTRAINT] определение_ограничения |
  DROP [CONSTRAINT] имя_ограничения}
INSERT INTO имя_таблицы (столбец1, столбец2, ... столбецN) - вставка
 VALUES (значение1, значение2, ... значениеN)
AS - изменить название выходного столбца или определить его псевдоним
WHERE - условие = <> != < > <= >= AND OR NOT IS NULL
UPDATE имя_таблицы - изменить строку
 SET столбец1 = значение1, столбец2 = значение2, ... столбецN = значениеN
 [WHERE условие_обновления]
DELETE FROM имя_таблицы - удаление
 [WHERE условие_удаления]
DISTINCT - выбрать уникальные данные по определенным столбцам
ORDER BY -  отсортировать значения по определенному столбцу. Если после имени критерия сортировки поставить DESC, то будет по убыванию. (ASC - возрастанию)
LIMIT - извлекает определённое количество строк
OFFSET - указать, с какой строки надо начинать выборку
IN - позволяет определить набор значений, которые должны иметь столбцы
BETWEEN - определяет диапазон значений с помощью начального и конечного значения, которому должно соответствовать выражение
LIKE - принимает шаблон строки, которому должно соответствовать выражение
GROUP BY и HAVING - группировка данных
SELECT столбцы
 FROM таблица
  [WHERE условие_фильтрации_строк]
  [GROUP BY столбцы_для_группировки]
  [HAVING условие_фильтрации_групп]
  [ORDER BY столбцы_для_сортировки]
GROUP BY GROUPING - руппирует получемые наборы отдельно
GROUP BY ROLLUP(*name*) - добавляет суммирующую строку в результирующий набор
GROUP BY CUBE(*name1*,*name2*) - добавляет суммирующие строки для каждой комбинации групп
CAST(*name*, тип) - явна конвертировать тип
CONCAT(*str*, *str*, ...) - соединить строки
CREATE TYPE *name* AS ENUM ('name1', 'name2', 'name3');
JOIN или INNER JOIN - соединения таблиц
  SELECT столбцы
  FROM таблица1
  [INNER] JOIN таблица2
  ON условие1
  [[INNER] JOIN таблица3
  ON условие2]
OUTER JOIN - внешнее соединение позволяет возвратить все строки одной или двух таблиц
  SELECT столбцы
  FROM таблица1
  {LEFT|RIGHT|FULL} [OUTER] JOIN таблица2 ON условие1
  [{LEFT|RIGHT|FULL} [OUTER] JOIN таблица3 ON условие2]...
CROSS JOIN - перекрестное соединение создает набор строк, где каждая строка из одной таблицы соединяется с каждой строкой из второй таблицы
  SELECT * FROM Orders CROSS JOIN Customers;
UNION позволяет объединить два множества (условно две таблицы). Но в отличие от inner/outer join объединения соединяют не столбцы разных таблиц, а два однотипных набора в один. 
  SELECT_выражение1
  UNION [ALL] SELECT_выражение2
  [UNION [ALL] SELECT_выражениеN]
|| - оператор объединения строк (пример SELECT FirstName || ' ' || LastName AS FullName)
EXCEPT - Оператор в PostgreSQL позволяет найти разность двух выборок, то есть те строки которые есть в первой выборке, но которых нет во второй
  SELECT_выражение1
  EXCEPT SELECT_выражение2
INTERSECT - Оператор позволяет найти общие строки для двух выборок


~~Агрегатные функции~~
AVG: находит среднее значение. 
BIT_AND: выполняет операцию побитового умножения (операции логического И) для чисел следующих типов: smallint, int, bigint, bit. 
BIT_OR: выполняет операцию побитового сложения (операции логического ИЛИ)
BOOL_AND: выполняет операцию логического умножения для значений типа bool. 
BOOL_OR: выполняет операцию логического сложения для значений типа bool. 
COUNT(*): находит количество строк в запросе
COUNT(expression): находит количество строк в запросе, для которых expression не содержит значение NULL.
SUM: находит сумму значений
MIN: находит наименьшее значение
MAX: находит наибольшее значение
STRING_AGG(expression, delimiter): соединяет с помощью delimiter все текстовые значения из expression в одну строку.

~~Специальные атрибуты столбцов~~
PRIMARY KEY - первичный ключ, его можно установить на уровне таблицы: атрибуты таблицы = PRIMARY KEY(Id). Первичный ключ может быть составным: PRIMARY KEY(*первый*, *второй*)
UNIQUE - только уникальные значения, UNIQUE(Email, Phone) если на уровне таблицы
NULL и NOT NULL - может или не может быть нул
DEFAULT - определяет значение по умолчанию (пример: Age INTEGER DEFAULT 18)
CHECK - ограничение на диапазон значений (пример: Age INTEGER CHECK(Age >0 AND Age < 100))
CONSTRAINT - имя для ограничения (например: Email CHARACTER VARYING(30) CONSTRAINT customers_email_key UNIQUE). Также можно использовать в качестве атрибутов таблицы: CONSTRAINT customer_Id PRIMARY KEY(Id)
FOREIGN KEY (стобец1, столбец2, ... столбецN) - внешний ключ
	REFERENCES главная_таблица (столбец_главной_таблицы) 
	[ON DELETE {CASCADE|RESTRICT}]
	[ON UPDATE {CASCADE|RESTRICT}]
ON DELETE и ON UPDATE - можно установить действия, которые выполняются соответственно при удалении и изменении связанной строки из главной таблицы.
CASCADE: автоматически удаляет или изменяет строки.
RESTRICT: предотвращает какие-либо действия в зависимой таблице при удалении или изменении связанных строк в главной таблице.
NO ACTION: действие по умолчанию, предотвращает какие-либо действия в зависимой таблице при удалении или изменении связанных строк в главной таблице. И генерирует ошибку. В отличие от RESTRICT выполняет отложенную проверку на связанность между таблицами.
SET NULL: при удалении связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение NULL.
SET DEFAULT: при удалении связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение по умолчанию, которое задается с помощью атрибуты DEFAULT. Если для столбца не задано значение по умолчанию, то в качестве него применяется значение NULL.

~~Числовые типы данных~~
-serial: представляет автоинкрементирующееся числовое значение, которое занимает 4 байта и может хранить числа от 1 до 2147483647. 
-smallserial: представляет автоинкрементирующееся числовое значение, которое занимает 2 байта и может хранить числа от 1 до 32767. 
-bigserial: представляет автоинкрементирующееся числовое значение, которое занимает 8 байт и может хранить числа от 1 до 9223372036854775807. -
-smallint: хранит числа от -32768 до +32767. Занимает 2 байта. Имеет псевдоним int2.
-integer: хранит числа от -2147483648 до +2147483647. Занимает 4 байта. Имеет псевдонимы int и int4.
-bigint: хранит числа от -9223372036854775808 до +9223372036854775807. Занимает 8 байт. Имеет псевдоним int8.
-numeric: хранит числа с фиксированной точностью, которые могут иметь до 131072 знаков в целой части и до 16383 знаков после запятой.
Данный тип может принимать два параметра precision и scale: numeric(precision, scale).
Параметр precision указывает на максимальное количество цифр, которые может хранить число.
Параметр scale представляет максимальное количество цифр после запятой. Это значение должно находиться в диапазоне 0 -> precision. По умолчанию оно равно 0.
Например, для числа 23.5141 precision равно 6, а scale - 4.
-decimal: хранит числа с фиксированной точностью, которые могут иметь до 131072 знаков в целой части и до 16383 знаков в дробной части. То же самое, что и numeric.
-real: хранит числа с плавающей точкой из диапазона от 1E-37 до 1E+37. Занимает 4 байта. Имеет псевдоним float4.
-double precision: хранит числа с плавающей точкой из диапазона от 1E-307 до 1E+308. Занимает 8 байт. Имеет псевдоним float8.

~~Типы для работы с валютой (денежными единицами)~~
-money: принимает значения в диапазоне от -92233720368547758.08 до +92233720368547758.07 и занимает 8 байт.

~~Символьные типы~~
-character(n): представляет строку из фиксированного количества символов. Задается количество символов в строке. Имеет псевдоним char(n).
-character varying(n): представляет строку из переменной длины. Задается максимальное количество символов в строке. Имеет псевдоним varchar(n).
-text: представляет текст произвольной длины.

~~Бинарные данные~~
-bytea: для хранения бинарных данных. Он хранит данные в виде бинарных строк, которые представляют последовательность октетов или байт.

~~Логический тип~~
- boolean: может хранить одно из двух значений: true или false.

~~Другие типы данных~~
Смотреть https://metanit.com/sql/postgresql/2.3.php